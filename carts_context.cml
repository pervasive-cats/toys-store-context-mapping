import "domain.cml"

BoundedContext CartsContext implements CartsDomain {
    type FEATURE
    knowledgeLevel CONCRETE
    domainVisionStatement "Bounded context responsible for managing smart carts state."
    implementationTechnology "Akka actor"
    responsibilities "Carts"

    Aggregate Cart {

        abstract Entity Cart {
            aggregateRoot

            - CartId cartId
            - Store store
            boolean isMovable

            Repository CartRepository {

                @Cart findById(@CartId cartId, @Store store);

                Set<@Cart> findByStore(@Store store);

                void add(@Cart cart);

                void ^update(@Cart cart);

                void remove(@Cart cart);
            }
        }

        Entity LockedCart extends Cart {

            def @UnlockedCart unlock();

            def @AssociatedCart associateTo(@Customer customer);
        }

        Entity UnlockedCart extends Cart {

            def @LockedCart lock();

            def @AssociatedCart associateTo(@Customer customer);
        }

        Entity AssociatedCart extends Cart {

            - Customer customer

            def @LockedCart lock();
        }

        ValueObject CartId {
            long id
        }

        ValueObject Store {
            long id
        }

        ValueObject Customer {
            String ^email
        }

        ValueObject Item {
            - ItemCategory itemCategory
            - ItemId id
        }

        ValueObject ItemCategory {
            long id
        }

        ValueObject ItemId {
            long id
        }

        DomainEvent CartAssociated {
            - CartId cartId
            - Store store
            - Customer customer
        }

        DomainEvent ItemInsertedIntoCart {
            - CartId cartId
            - Store store
            - Item item
        }

        DomainEvent ItemAddedToCart {
            - Customer customer
            - Store store
            - Item item
        }

        DomainEvent CartMoved {
            - CartId cartId
            - Store store
        }

        DomainEvent CustomerUnregistered {
            - Customer customer
        }

        Service ItemInsertionHandlers {

            void onItemInsertedIntoCart(@ItemInsertedIntoCart ^event);
        }

        Service CartMovementHandlers {

            void onCartMoved(@CartMoved ^event);
        }

        Service CustomerStateHandlers {

            void onCustomerUnregistered(@CustomerUnregistered ^event);
        }
    }
}
