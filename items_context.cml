import "domain.cml"

BoundedContext ItemsContext implements ItemsDomain {
    type FEATURE
    knowledgeLevel CONCRETE
    domainVisionStatement "Bounded context responsible for keeping information about items sold in different stores."
    implementationTechnology "Akka actor"
    responsibilities "Item Categories", "Catalog Items", "Items"

    Aggregate ItemCategory {

        Entity ItemCategory {
            aggregateRoot

            - ItemCategoryId id
            - Name name
            - Description description

            def @ItemCategory updated(@Name name, @Description description);

            Repository ItemCategoryRepository {

                @ItemCategory findById(@ItemCategoryId id);

                @ItemCategory add(@Name name, @Description description);

                void ^update(@ItemCategory itemCategory);

                void remove(@ItemCategoryId id);
            }
        }

        ValueObject ItemCategoryId {
            long id
        }

        ValueObject Name {
            String name
        }

        ValueObject Description {
            String description
        }

        Service ItemCategoryService {

            @ItemCategory add(@Name name, @Description description);

            @ItemCategory ^update(@ItemCategoryId id, @Name newName, @Description newDescription);

            void remove(@ItemCategoryId id);
        }
    }

    Aggregate CatalogItem {

        abstract Entity CatalogItem {
            aggregateRoot

            - ItemCategory category
            - Store store
            - Price price

            def @CatalogItem updated(@Price price);

            Repository CatalogItemRepository {

                @CatalogItem findById(@ItemCategoryId itemCategoryId, @Store storeId);

                Set<@LiftedCatalogItem> findAllLifted();

                @CatalogItem add(@ItemCategory category, @Store store, @Price price);

                void ^update(@CatalogItem catalogItem);

                void remove(@ItemCategoryId itemCategoryId, @Store storeId);
            }
        }

        Entity InPlaceCatalogItem extends CatalogItem {

            def @LiftedCatalogItem lift();
        }

        Entity LiftedCatalogItem extends CatalogItem {

            def @InPlaceCatalogItem putInPlace();
        }

        ValueObject Store {
            long id
        }

        ValueObject Price {
            - Amount amount
            - Currency currency
        }

        ValueObject Amount {
            int amount
        }

        ValueObject Currency

        DomainEvent CatalogItemPutInPlace {
            - ItemCategoryId itemCategoryId
            - Store store
        }

        DomainEvent CatalogItemLifted {
            - ItemCategoryId itemCategoryId
            - Store store
        }

        Service CatalogItemService {

            @CatalogItem findById(@ItemCategoryId itemCategoryId, @Store store);

            Set<@LiftedCatalogItem> findAllLifted();

            @CatalogItem add(@ItemCategory category, @Store store, @Price price);

            @CatalogItem ^update(@ItemCategoryId itemCategoryId, @Store store, @Price price);

            void remove(@ItemCategoryId itemCategoryId, @Store store);
        }

        Service CatalogItemStateHandlersService {

            void onCatalogItemPutInPlace(@CatalogItemPutInPlace ^event);

            void onCatalogItemLifted(@CatalogItemLifted ^event);
        }
    }

    Aggregate Item {

        abstract Entity Item {
            aggregateRoot

            - ItemId id
            - CatalogItem kind

            Repository ItemRepository {

                @Item findById(@ItemId itemId, @ItemCategoryId itemCategoryId, @Store storeId);

                Set<@ReturnedItem> findAllReturned();

                @Item add(@ItemId id, @CatalogItem kind);

                void remove(@ItemId id, @ItemCategoryId itemCategoryId, @Store storeId);
            }
        }

        Entity InPlaceItem extends Item {

            def @InCartItem putInCart();
        }

        Entity InCartItem extends Item {

            def @ReturnedItem returnToStore();
        }

        Entity ReturnedItem extends Item {

            def @InPlaceItem putInPlace();
        }

        ValueObject ItemId {
            long id
        }

        ValueObject Customer {
            String ^email
        }

        DomainEvent ItemAddedToCart {
            - ItemCategoryId itemCategoryId
            - Store store
            - ItemId itemId
            - Customer customer
        }

        DomainEvent ItemReturned {
            - ItemCategoryId itemCategoryId
            - Store store
            - ItemId itemId
        }

        DomainEvent ItemPutInPlace {
            - ItemCategoryId itemCategoryId
            - Store store
            - ItemId itemId
        }

        Service ItemService {

            @Item findById(@ItemId itemId, @ItemCategoryId itemCategoryId, @Store storeId);

            Set<@ReturnedItem> findAllReturned();

            @Item add(@ItemId id, @CatalogItem kind);

            void remove(@ItemId itemId, @ItemCategoryId itemCategoryId, @Store storeId);

            void buy(@ItemId itemId, @ItemCategoryId itemCategoryId, @Store storeId);
        }

        Service ItemStateHandlersService {

            void onItemAddedToCart(@ItemAddedToCart ^event);

            void onItemReturned(@ItemReturned ^event);

            void onItemPutInPlace(@ItemPutInPlace ^event);
        }
    }
}
